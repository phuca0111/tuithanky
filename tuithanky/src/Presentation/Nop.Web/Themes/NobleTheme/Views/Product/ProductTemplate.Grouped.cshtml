@model ProductDetailsModel
@using Nop.Core.Domain.Seo
@inject Nop.Services.Html.IHtmlFormatter htmlFormatter
@inject Nop.Core.IWebHelper webHelper
@inject SeoSettings seoSettings
@{
    Layout = "_ColumnsTwo";

    //title
    NopHtml.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    NopHtml.AddMetaDescriptionParts(Model.MetaDescription);
    NopHtml.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    NopHtml.AppendPageCssClassParts("html-product-details-page");


    //canonical URL
    if (seoSettings.CanonicalUrlsEnabled)
    {
        var productUrl = Url.RouteUrl("Product", new { SeName = Model.SeName }, webHelper.GetCurrentRequestProtocol()).ToLowerInvariant();
        NopHtml.AddCanonicalUrlParts(productUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    //open graph META tags
    if (seoSettings.OpenGraphMetaTags)
    {
        NopHtml.AddHeadCustomParts("<meta property=\"og:type\" content=\"product\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:description\" content=\"" + Html.Encode(htmlFormatter.StripTags(Model.MetaDescription)) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:image:url\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:url\" content=\"" + webHelper.GetThisPageUrl(false) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:site_name\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
    }

    //Twitter META tags
    if (seoSettings.TwitterMetaTags)
    {
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:card\" content=\"summary\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:site\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:description\" content=\"" + Html.Encode(htmlFormatter.StripTags(Model.MetaDescription)) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:url\" content=\"" + webHelper.GetThisPageUrl(false) + "\" />");
    }
}
<!--product breadcrumb-->
<div class="breadcrumb-wrapper">
    @await Html.PartialAsync("_ProductBreadcrumb", Model.Breadcrumb)
</div>
@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsAfterBreadcrumb, additionalData = Model })
<div class="page product-details-page">
    <div class="page-body">
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsTop, additionalData = Model })
        <form asp-route="Product" asp-route-sename="@Model.SeName" method="post" id="product-details-form">
            @if (seoSettings.MicrodataEnabled)
            {
            @await Html.PartialAsync("_Microdata", Model)
            }
            <div data-productid="@Model.Id">
                <div class="product-name panel-heading">
                    <h1>
                        @Model.Name
                    </h1>
                </div>
                <div class="product-essential from-panel">
                    <div class="panel-body">
                        <div class="row">
                            <div class="col-md-6">
                                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsEssentialTop, additionalData = Model })
                                <!--product pictures-->
                                @await Html.PartialAsync("_ProductDetailsPictures", Model)
                            </div>
                            <div class="col-md-6">
                                <div class="overview">
                                    @await Html.PartialAsync("_Discontinued", Model)
                                    @if (!string.IsNullOrEmpty(Model.ShortDescription))
                                    {
                                    <div class="short-description">
                                        @Html.Raw(Model.ShortDescription)
                                    </div>
                                    }
                                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsOverviewTop, additionalData = Model })
                                    <!--product manufacturers-->
                                    @await Html.PartialAsync("_ProductManufacturers", Model.ProductManufacturers)
                                    <!--product reviews-->
                                    @await Html.PartialAsync("_ProductReviewOverview", Model.ProductReviewOverview)
                                    <!--compare, email a friend-->
                                    <div class="form-group email-friend-btn">
                                        <div class="email-compare-button">
                                            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsInsideOverviewButtonsBefore, additionalData = Model })
                                            @await Html.PartialAsync("_CompareProductsButton", Model)
                                            @await Html.PartialAsync("_ProductEmailAFriendButton", Model)
                                            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsInsideOverviewButtonsAfter, additionalData = Model })
                                        </div>
                                    </div>
                                    <!--price breaks-->
                                    @await Html.PartialAsync("_ProductTierPrices", Model.TierPrices)
                                    @await Html.PartialAsync("_ShareButton", Model)
                                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsOverviewBottom, additionalData = Model })
                                </div>
                                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsEssentialBottom, additionalData = Model })
                            </div>
                        </div>
                        <div class="product-details-tabs">
                            <ul class="nav nav-tabs">
                                @if (!string.IsNullOrEmpty(Model.FullDescription))
                                {
                                <li class="active"><a href="#description" data-toggle="tab">@T("products.compare.fulldescription")</a></li>
                                }
                                @if (!string.IsNullOrEmpty(@Html.PartialAsync("_ProductTags", Model.ProductTags).ToString()))
                                {
                                <li><a href="#tags" data-toggle="tab">@T("Products.Tags")</a></li>
                                }
                                @if (!string.IsNullOrEmpty(@Html.PartialAsync("_ProductSpecifications", Model).ToString()))
                                {
                                <li><a href="#specification" data-toggle="tab">@T("Products.Specs")</a></li>
                                }
                            </ul>
                            <div class="tab-content">
                                @if (!string.IsNullOrEmpty(Model.FullDescription))
                                {
                                <div class="full-description tab-pane fade in active" id="description">
                                    @Html.Raw(Model.FullDescription)
                                </div>
                                }
                                <div class="product-tags tab-pane fade" id="tags">
                                    @await Html.PartialAsync("_ProductTags", Model.ProductTags)
                                </div>
                                <div class="product-specification fade tab-pane" id="specification">
                                    @await Html.PartialAsync("_ProductSpecifications", Model.ProductSpecificationModel)
                                </div>
                            </div>
                        </div>
                        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsBeforeCollateral, additionalData = Model })
                        <div class="product-collateral row">
                            <!--associated products-->
                            <div class="product-variant-list col-md-12">
                                @foreach (var variant in Model.AssociatedProducts)
                                {
                                <div class="product-variant-line clearfix row" data-productid="@variant.Id">
                                    @if (!string.IsNullOrWhiteSpace(variant.DefaultPictureModel.ImageUrl))
                                        {
                                    <div class="variant-picture">
                                        <img alt="@variant.DefaultPictureModel.AlternateText" src="@variant.DefaultPictureModel.ImageUrl"
                                             title="@variant.DefaultPictureModel.Title" id="main-product-img-@variant.Id" />
                                    </div>
                                        }
                                    <div class="variant-overview">
                                        @if (!string.IsNullOrWhiteSpace(variant.Name))
                                            {
                                        <div class="variant-name">
                                            @variant.Name
                                        </div>
                                            }
                                        @if (!string.IsNullOrWhiteSpace(variant.ShortDescription))
                                            {
                                        <div class="variant-description">
                                            @Html.Raw(variant.ShortDescription)
                                        </div>
                                            }
                                        <!--SKU, MAN, GTIN, vendor-->
                                        @await Html.PartialAsync("_SKU_Man_GTIN_Ven", variant)
                                        <!--delivery-->
                                        @await Html.PartialAsync("_DeliveryInfo", variant)
                                        <!--sample download-->
                                        @await Html.PartialAsync("_DownloadSample", variant)
                                        <!--attributes-->
                                        @{
                                                var dataDictAttributes = new ViewDataDictionary(ViewData);
                                                dataDictAttributes.TemplateInfo.HtmlFieldPrefix = $"attributes_{variant.Id}";
                                            @await Html.PartialAsync("_ProductAttributes", variant, dataDictAttributes)
                                        }
                                        <!--gift card-->
                                        @{
                                                var dataDictGiftCard = new ViewDataDictionary(ViewData);
                                                dataDictGiftCard.TemplateInfo.HtmlFieldPrefix = $"giftcard_{variant.Id}";
                                            @await Html.PartialAsync("_GiftCardInfo", variant.GiftCard, dataDictGiftCard)
                                        }
                                        <!--rental info-->
                                        @{
                                                var dataDictRental = new ViewDataDictionary(ViewData);
                                                dataDictRental.TemplateInfo.HtmlFieldPrefix = $"rental_{variant.Id}";
                                            @await Html.PartialAsync("_RentalInfo", variant, dataDictRental)
                                        }
                                        <!--price & add to cart-->
                                        <div class="price-availability">
                                            @{
                                                    var dataDictPrice = new ViewDataDictionary(ViewData);
                                                    dataDictPrice.TemplateInfo.HtmlFieldPrefix = $"price_{variant.Id}";
                                                @await Html.PartialAsync("_ProductPrice", variant.ProductPrice, dataDictPrice)
 <!--availability-->
                                                @await Html.PartialAsync("_Availability", variant)
                                            }
                                            <!--price breaks-->
                                            @{
                                                    var dataDictAddToCart = new ViewDataDictionary(ViewData);
                                                    dataDictAddToCart.TemplateInfo.HtmlFieldPrefix = $"addtocart_{variant.Id}";
                                                @await Html.PartialAsync("_AddToCart", variant.AddToCart, dataDictAddToCart)
                                            }
                                            <!--estimate shipping-->
                                            @{
                                                    var dataDictEstimateShipping = new ViewDataDictionary(ViewData);
                                                    dataDictEstimateShipping.TemplateInfo.HtmlFieldPrefix = $"estimate_shipping_{variant.Id}";
                                                @await Html.PartialAsync("_ProductEstimateShipping", variant.ProductEstimateShipping, dataDictEstimateShipping)
                                            }
                                        </div>
                                        @await Html.PartialAsync("_ProductTierPrices", variant.TierPrices)
                                        <div class="form-group email-friend-btn">
                                            <div class="email-compare-button">
                                                <!--wishlist-->
                                                @{
                                                        var dataDictAddToWishlist = new ViewDataDictionary(ViewData);
                                                        dataDictAddToWishlist.TemplateInfo.HtmlFieldPrefix = $"addtocart_{variant.Id}";
                                                    @await Html.PartialAsync("_AddToWishlist", variant.AddToCart, dataDictAddToWishlist)
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                }
                                @if (Model.AssociatedProducts.Count == 0)
                                {
                                <div class="no-associated-products">
                                    @T("Products.NoAssociatedProducts")
                                </div>
                                }
                            </div>
                        </div>
                        @*we do not display "also purchased" for grouped products
                            @await Component.InvokeAsync("ProductsAlsoPurchased", new { productId = Model.Id })*@
                        @await Component.InvokeAsync("RelatedProducts", new { productId = Model.Id })
                    </div>
                </div>
            </div>
        </form>
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsBottom, additionalData = Model })
    </div>
</div>

